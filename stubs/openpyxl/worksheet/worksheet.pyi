from .cell_range import CellRange as CellRange, MultiCellRange as MultiCellRange
from .datavalidation import DataValidationList as DataValidationList
from .dimensions import ColumnDimension as ColumnDimension, DimensionHolder as DimensionHolder, RowDimension as RowDimension, SheetFormatProperties as SheetFormatProperties
from .filters import AutoFilter as AutoFilter
from .formula import ArrayFormula as ArrayFormula
from .merge import MergedCellRange as MergedCellRange
from .page import PageMargins as PageMargins, PrintOptions as PrintOptions, PrintPageSetup as PrintPageSetup
from .pagebreak import ColBreak as ColBreak, RowBreak as RowBreak
from .print_settings import ColRange as ColRange, PrintArea as PrintArea, PrintTitles as PrintTitles, RowRange as RowRange
from .properties import WorksheetProperties as WorksheetProperties
from .protection import SheetProtection as SheetProtection
from .scenario import ScenarioList as ScenarioList
from .table import TableList as TableList
from .views import Pane as Pane, Selection as Selection, SheetViewList as SheetViewList
from _typeshed import Incomplete
from collections.abc import Generator
from openpyxl.cell import Cell as Cell, MergedCell as MergedCell
from openpyxl.compat import deprecated as deprecated
from openpyxl.formatting.formatting import ConditionalFormattingList as ConditionalFormattingList
from openpyxl.formula.translate import Translator as Translator
from openpyxl.packaging.relationship import RelationshipList as RelationshipList
from openpyxl.utils import column_index_from_string as column_index_from_string, coordinate_to_tuple as coordinate_to_tuple, get_column_letter as get_column_letter, range_boundaries as range_boundaries
from openpyxl.workbook.child import _WorkbookChild
from openpyxl.workbook.defined_name import DefinedNameDict as DefinedNameDict

class Worksheet(_WorkbookChild):
    mime_type: str
    BREAK_NONE: int
    BREAK_ROW: int
    BREAK_COLUMN: int
    SHEETSTATE_VISIBLE: str
    SHEETSTATE_HIDDEN: str
    SHEETSTATE_VERYHIDDEN: str
    PAPERSIZE_LETTER: str
    PAPERSIZE_LETTER_SMALL: str
    PAPERSIZE_TABLOID: str
    PAPERSIZE_LEDGER: str
    PAPERSIZE_LEGAL: str
    PAPERSIZE_STATEMENT: str
    PAPERSIZE_EXECUTIVE: str
    PAPERSIZE_A3: str
    PAPERSIZE_A4: str
    PAPERSIZE_A4_SMALL: str
    PAPERSIZE_A5: str
    ORIENTATION_PORTRAIT: str
    ORIENTATION_LANDSCAPE: str
    def __init__(self, parent, title: Incomplete | None = None) -> None: ...
    @property
    def sheet_view(self): ...
    @property
    def selected_cell(self): ...
    @property
    def active_cell(self): ...
    @property
    def array_formulae(self): ...
    @property
    def show_gridlines(self): ...
    @property
    def freeze_panes(self): ...
    @freeze_panes.setter
    def freeze_panes(self, topLeftCell: Incomplete | None = None) -> None: ...
    def cell(self, row, column, value: Incomplete | None = None): ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def __iter__(self): ...
    def __delitem__(self, key) -> None: ...
    @property
    def min_row(self): ...
    @property
    def max_row(self): ...
    @property
    def min_column(self): ...
    @property
    def max_column(self): ...
    def calculate_dimension(self): ...
    @property
    def dimensions(self): ...
    def iter_rows(self, min_row: Incomplete | None = None, max_row: Incomplete | None = None, min_col: Incomplete | None = None, max_col: Incomplete | None = None, values_only: bool = False): ...
    @property
    def rows(self): ...
    @property
    def values(self) -> Generator[Incomplete]: ...
    def iter_cols(self, min_col: Incomplete | None = None, max_col: Incomplete | None = None, min_row: Incomplete | None = None, max_row: Incomplete | None = None, values_only: bool = False): ...
    @property
    def columns(self): ...
    @property
    def column_groups(self): ...
    def set_printer_settings(self, paper_size, orientation) -> None: ...
    def add_data_validation(self, data_validation) -> None: ...
    def add_chart(self, chart, anchor: Incomplete | None = None) -> None: ...
    def add_image(self, img, anchor: Incomplete | None = None) -> None: ...
    def add_table(self, table) -> None: ...
    @property
    def tables(self): ...
    def add_pivot(self, pivot) -> None: ...
    def merge_cells(self, range_string: Incomplete | None = None, start_row: Incomplete | None = None, start_column: Incomplete | None = None, end_row: Incomplete | None = None, end_column: Incomplete | None = None) -> None: ...
    @property
    def merged_cell_ranges(self): ...
    def unmerge_cells(self, range_string: Incomplete | None = None, start_row: Incomplete | None = None, start_column: Incomplete | None = None, end_row: Incomplete | None = None, end_column: Incomplete | None = None) -> None: ...
    def append(self, iterable) -> None: ...
    def insert_rows(self, idx, amount: int = 1) -> None: ...
    def insert_cols(self, idx, amount: int = 1) -> None: ...
    def delete_rows(self, idx, amount: int = 1) -> None: ...
    def delete_cols(self, idx, amount: int = 1) -> None: ...
    def move_range(self, cell_range, rows: int = 0, cols: int = 0, translate: bool = False) -> None: ...
    @property
    def print_title_rows(self): ...
    @print_title_rows.setter
    def print_title_rows(self, rows) -> None: ...
    @property
    def print_title_cols(self): ...
    @print_title_cols.setter
    def print_title_cols(self, cols) -> None: ...
    @property
    def print_titles(self): ...
    @property
    def print_area(self): ...
    @print_area.setter
    def print_area(self, value) -> None: ...
