from _typeshed import Incomplete
from collections.abc import Generator
from openpyxl.descriptors import MinMax as MinMax, Strict as Strict
from openpyxl.descriptors.sequence import UniqueSequence as UniqueSequence
from openpyxl.descriptors.serialisable import Serialisable as Serialisable
from openpyxl.utils import get_column_letter as get_column_letter, quote_sheetname as quote_sheetname, range_boundaries as range_boundaries, range_to_tuple as range_to_tuple

class CellRange(Serialisable):
    min_col: Incomplete
    min_row: Incomplete
    max_col: Incomplete
    max_row: Incomplete
    title: Incomplete
    def __init__(self, range_string: Incomplete | None = None, min_col: Incomplete | None = None, min_row: Incomplete | None = None, max_col: Incomplete | None = None, max_row: Incomplete | None = None, title: Incomplete | None = None) -> None: ...
    @property
    def bounds(self): ...
    @property
    def coord(self): ...
    @property
    def rows(self) -> Generator[Incomplete]: ...
    @property
    def cols(self) -> Generator[Incomplete]: ...
    @property
    def cells(self): ...
    def __hash__(self): ...
    def __copy__(self): ...
    def shift(self, col_shift: int = 0, row_shift: int = 0) -> None: ...
    def __ne__(self, other): ...
    def __eq__(self, other): ...
    def issubset(self, other): ...
    __le__ = issubset
    def __lt__(self, other): ...
    def issuperset(self, other): ...
    __ge__ = issuperset
    def __contains__(self, coord) -> bool: ...
    def __gt__(self, other): ...
    def isdisjoint(self, other): ...
    def intersection(self, other): ...
    __and__ = intersection
    def union(self, other): ...
    __or__ = union
    def __iter__(self): ...
    def expand(self, right: int = 0, down: int = 0, left: int = 0, up: int = 0) -> None: ...
    def shrink(self, right: int = 0, bottom: int = 0, left: int = 0, top: int = 0) -> None: ...
    @property
    def size(self): ...
    @property
    def top(self): ...
    @property
    def bottom(self): ...
    @property
    def left(self): ...
    @property
    def right(self): ...

class MultiCellRange(Strict):
    ranges: Incomplete
    def __init__(self, ranges=...) -> None: ...
    def __contains__(self, coord) -> bool: ...
    def __hash__(self): ...
    def sorted(self): ...
    def add(self, coord) -> None: ...
    def __iadd__(self, coord): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __bool__(self) -> bool: ...
    def remove(self, coord) -> None: ...
    def __iter__(self): ...
    def __copy__(self): ...
