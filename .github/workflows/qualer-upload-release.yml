name: Upload & Release on Merge

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
      branch:
        required: false
        type: string
        default: "main"
    secrets:
      QUALER_EMAIL:
        required: true
      QUALER_PASSWORD:
        required: true
      SHAREPOINT_CLIENT_ID:
        required: true
      SHAREPOINT_CLIENT_SECRET:
        required: true
      SHAREPOINT_TENANT_ID:
        required: true

jobs:
  re-validate:
    runs-on: ubuntu-latest
    outputs:
      EXCEL_FILE: ${{ steps.set-excel-file.outputs.EXCEL_FILE }}
      UPLOAD: ${{ steps.set-excel-file.outputs.UPLOAD }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Capture Excel File Changes
        id: capture_changes
        run: |
          git fetch --unshallow origin main
          git diff --name-status HEAD~1 HEAD | grep -E '\.xl' > changed_files.txt || true
          cat changed_files.txt  # Debugging step

      - name: Count and Validate Excel Files
        id: set-excel-file
        run: |
            EXCEL_COUNT=$(find . -type f -iname "*.xl*" | wc -l)
            echo "Excel files found: $EXCEL_COUNT"

            if [ "$EXCEL_COUNT" -eq 0 ]; then
              echo "✅ No Excel files found. Exiting without error."
            elif [ "$EXCEL_COUNT" -eq 1 ]; then
              if ! [ -s changed_files.txt ]; then
                echo "✅ No Excel files changed. Exiting without error."
              else
                EXCEL_FILE=$(find . -type f -iname "*.xl*" | head -n 1)
                echo "✅ Using Excel file: $EXCEL_FILE"
                echo "EXCEL_FILE=$EXCEL_FILE" >> $GITHUB_OUTPUT
                echo "UPLOAD=true" >> $GITHUB_OUTPUT
              fi
            fi

  update-excel-metadata:
    needs: re-validate
    if: needs.re-validate.outputs.UPLOAD == 'true'
    runs-on: ubuntu-latest
    outputs:
      EXCEL_FILE: ${{ steps.modify.outputs.EXCEL_FILE }}
      COMMIT_HASH: ${{ steps.commit-hash.outputs.COMMIT_HASH }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Python dependencies
        run: pip install openpyxl

      - name: Locate the Identified Excel File
        run: |
          echo "EXCEL_FILE=${{ needs.re-validate.outputs.EXCEL_FILE }}" >> $GITHUB_ENV

      - name: Extract Git Commit Info
        id: commit-hash
        run: |
          echo "COMMIT_HASH=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_ENV
          echo "COMMIT_HASH=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_OUTPUT

      - name: Set clock to central time
        run: sudo timedatectl set-timezone America/Chicago

      - name: Update Excel Metadata (Revision, Version, Company)
        id: modify
        run: |
          python <<EOF
          import openpyxl
          from datetime import datetime
          import os

          original_file = os.getenv("EXCEL_FILE", "UNKNOWN")
          if not os.path.exists(original_file):
              print(f"❌ ERROR: File not found: {original_file}")
              exit(1)

          # Define a new file path for the modified file
          modified_file = os.path.join("/tmp", os.path.basename(original_file))

          workbook = openpyxl.load_workbook(original_file)
          metadata = workbook.properties

          # Read commit hash and tag from environment
          commit_hash = os.getenv("COMMIT_HASH", "UNKNOWN")
          today = datetime.now().strftime("%Y-%m-%d")
          company_name = "Johnson Gage & Inspection"

          # Set metadata properties
          metadata.creator = "${{ github.actor }}"
          metadata.lastModifiedBy = "${{ github.actor }}"
          metadata.created = datetime.now()
          metadata.modified = datetime.now()
          metadata.version = today
          metadata.keywords = commit_hash

          # Save metadata and workbook as a new file
          workbook.properties = metadata
          workbook.save(modified_file)

          # Confirm metadata was written
          print(f"✅ Updated Excel Metadata in {modified_file}: Version={today}, Tags={commit_hash}, Company={company_name}")

          # Output the new modified file path
          with open(os.environ['GITHUB_ENV'], "a") as f:
              f.write(f"EXCEL_FILE={modified_file}\n")

          with open(os.environ['GITHUB_OUTPUT'], "a") as f:
              f.write(f"EXCEL_FILE={modified_file}\n")
          EOF

      - name: Upload Modified Excel File
        uses: actions/upload-artifact@v4
        with:
          name: updated-excel
          path: ${{ steps.modify.outputs.EXCEL_FILE }}

  sync-to-sharepoint:
    needs: [update-excel-metadata, re-validate]
    if: needs.re-validate.outputs.UPLOAD == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Overwrite with Updated Excel File
        uses: actions/download-artifact@v4
        with:
          name: updated-excel

      - name: Authenticate with SharePoint
        env:
          SHAREPOINT_CLIENT_ID: ${{ secrets.SHAREPOINT_CLIENT_ID }}
          SHAREPOINT_CLIENT_SECRET: ${{ secrets.SHAREPOINT_CLIENT_SECRET }}
          SHAREPOINT_TENANT_ID: ${{ secrets.SHAREPOINT_TENANT_ID }}
        run: |
          TOKEN_RESPONSE=$(curl -X POST \
            -d "grant_type=client_credentials" \
            -d "client_id=${SHAREPOINT_CLIENT_ID}" \
            -d "client_secret=${SHAREPOINT_CLIENT_SECRET}" \
            -d "scope=https://graph.microsoft.com/.default" \
            "https://login.microsoftonline.com/${SHAREPOINT_TENANT_ID}/oauth2/v2.0/token")
          echo "Token Response: $TOKEN_RESPONSE"  # Debugging step

          ACCESS_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.access_token')
          if [ "$ACCESS_TOKEN" == "null" ] || [ -z "$ACCESS_TOKEN" ]; then
            echo "❌ Error: Failed to retrieve access token. Exiting."
            exit 1
          fi
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV
          echo "ACCESS_TOKEN=${ACCESS_TOKEN}"

      - name: Set SharePoint Drive ID Manually
        run: |
          DRIVE_ID="b!62zY21rTlkyTbN2E9veLub0A9-qfsQ1LmVs-siAwkjUpikiIFZhHTb5VFJuc7Xng"
          echo "DRIVE_ID=$DRIVE_ID" >> $GITHUB_ENV
  
      - name: Upload Excel File to SharePoint
        env:
          ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
          DRIVE_ID: ${{ env.DRIVE_ID }}
        run: |
          FILE_PATH="${{ needs.re-validate.outputs.EXCEL_FILE }}"
          FILE_NAME=$(basename "$FILE_PATH")
          DRIVE_ID="b!62zY21rTlkyTbN2E9veLub0A9-qfsQ1LmVs-siAwkjUpikiIFZhHTb5VFJuc7Xng"
          UPLOAD_URL="https://graph.microsoft.com/v1.0/drives/$DRIVE_ID/root:/$FILE_NAME:/content"

          RESPONSE=$(curl -X PUT "$UPLOAD_URL" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$FILE_PATH")

          echo "SharePoint API Response: $RESPONSE"

          if echo "$RESPONSE" | grep -q 'error'; then
            echo "❌ Upload failed. Exiting."
            exit 1
          fi

  rename-file:
    needs: [update-excel-metadata, re-validate]
    if: needs.re-validate.outputs.UPLOAD == 'true'
    runs-on: ubuntu-latest
    outputs:
      RENAMED_FILE: ${{ steps.rename.outputs.RENAMED_FILE }}
    steps:
      - name: Set clock to central time
        run: sudo timedatectl set-timezone America/Chicago

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Overwrite with Updated Excel File
        uses: actions/download-artifact@v4
        with:
          name: updated-excel

      - name: Rename File with Date
        id: rename
        run: |
          TAGGED_FILE="${{ needs.re-validate.outputs.EXCEL_FILE }}"
          if [ -z "$TAGGED_FILE" ]; then
            echo "❌ ERROR: TAGGED_FILE is empty. Exiting."
            exit 1
          fi
          FILE_DIR=$(dirname "$TAGGED_FILE")
          FILE_NAME=$(basename "$TAGGED_FILE")
          FILE_BASE="${FILE_NAME%.*}"
          FILE_EXT="${FILE_NAME##*.}"
          TODAY=$(date +%Y-%m-%d)
          RENAMED_FILE="${FILE_DIR}/${FILE_BASE}_${TODAY}.${FILE_EXT}"
          mv "$TAGGED_FILE" "$RENAMED_FILE"
          echo "RENAMED_FILE=$RENAMED_FILE" >> $GITHUB_ENV
          echo "RENAMED_FILE=$RENAMED_FILE" >> $GITHUB_OUTPUT

      - name: Upload Renamed Excel File
        uses: actions/upload-artifact@v4
        with:
          name: renamed-excel
          path: ${{ steps.rename.outputs.RENAMED_FILE }}

  upload-to-qualer:
    needs: [re-validate, update-excel-metadata, rename-file]
    if: needs.re-validate.outputs.UPLOAD == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout `ci-scripts` Repository
        uses: actions/checkout@v3
        with:
          repository: Johnson-Gage-Inspection-Inc/ci-scripts
          path: ci-scripts
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure `upload_sop.sh` is Executable
        run: chmod +x ./ci-scripts/upload_sop.sh

      - name: Download Renamed Excel File
        uses: actions/download-artifact@v4
        with:
          name: renamed-excel

      - name: Run Upload Script
        run: ./ci-scripts/upload_sop.sh
        env:
          QUALER_EMAIL: ${{ secrets.QUALER_EMAIL }}
          QUALER_PASSWORD: ${{ secrets.QUALER_PASSWORD }}
          EXCEL_FILE: ${{ needs.rename-file.outputs.RENAMED_FILE }}
          COMMIT_HASH: ${{ needs.update-excel-metadata.outputs.COMMIT_HASH }}
          AUTHOR_NAME: ${{ github.actor }}

  create-github-release:
    needs: [re-validate, update-excel-metadata, rename-file]
    if: needs.re-validate.outputs.UPLOAD == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Release Tag (Current Date)
        id: release-tag
        run: echo "RELEASE_TAG=$(date +%Y-%m-%d_%H-%M-%S)" >> $GITHUB_OUTPUT

      - name: Download Renamed Excel File
        uses: actions/download-artifact@v4
        with:
          name: renamed-excel
          path: .

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.release-tag.outputs.RELEASE_TAG }} \
            --repo "${{ github.repository }}" \
            --title "Release ${{ steps.release-tag.outputs.RELEASE_TAG }}" \
            --notes "Automated release for commit ${{ needs.update-excel-metadata.outputs.COMMIT_HASH }} by ${{ github.actor }}."

      - name: Upload Renamed Excel File as Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ steps.release-tag.outputs.RELEASE_TAG }} ${{ needs.rename-file.outputs.RENAMED_FILE }} \
            --repo "${{ github.repository }}"
