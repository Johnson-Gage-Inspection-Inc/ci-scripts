name: Upload & Release on Merge

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
      branch:
        required: false
        type: string
        default: "main"
    secrets:
      QUALER_EMAIL:
        required: true
      QUALER_PASSWORD:
        required: true
      SHAREPOINT_CLIENT_ID:
        required: true
      SHAREPOINT_CLIENT_SECRET:
        required: true
      SHAREPOINT_TENANT_ID:
        required: true

jobs:
  re-validate:
    runs-on: ubuntu-latest
    outputs:
      EXCEL_FILE: ${{ steps.set-excel-file.outputs.EXCEL_FILE }}
      UPLOAD: ${{ steps.set-excel-file.outputs.UPLOAD }}
    steps:

      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Load environment variables
        run: |
          echo "Loading environment variables from .env"
          cat ".env" >> $GITHUB_ENV

      - name: Fetch remote branch
        run: git fetch origin ${{ inputs.branch }}

      - name: Capture Excel File Changes
        id: capture_changes
        run: |
          git fetch --unshallow origin main
          git diff --name-status HEAD~1 HEAD | grep -E '\.xl' > changed_files.txt || true
          cat changed_files.txt  # Debugging step

      - name: Count and Validate Excel Files
        id: set-excel-file
        run: |
            EXCEL_COUNT=$(find . -type f -iname "*.xl*" | wc -l)
            echo "Excel files found: $EXCEL_COUNT"

            if [ "$EXCEL_COUNT" -eq 0 ]; then
              echo "✅ No Excel files found. Exiting without error."
            elif [ "$EXCEL_COUNT" -eq 1 ]; then
              if ! [ -s changed_files.txt ]; then
                echo "✅ No Excel files changed. Exiting without error."
              else
                EXCEL_FILE=$(find . -type f -iname "*.xls*" | head -n 1)
                echo "✅ Using Excel file: $EXCEL_FILE"
                echo "EXCEL_FILE=$EXCEL_FILE" >> $GITHUB_OUTPUT
                echo "UPLOAD=true" >> $GITHUB_OUTPUT
              fi
            fi

  upload-to-qualer:
    needs: re-validate
    if: needs.re-validate.outputs.UPLOAD == 'true'
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v4
  
      - name: Load environment variables
        run: |
          echo "Loading environment variables from .env"
          cat ".env" >> $GITHUB_ENV

      - name: Checkout `ci-scripts` Repository
        uses: actions/checkout@v3
        with:
          repository: Johnson-Gage-Inspection-Inc/ci-scripts
          path: ci-scripts
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Short Commit Hash
        id: get-commit-hash
        run: echo "COMMIT_HASH=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_ENV

      - name: Ensure `upload_sop.sh` is Executable
        run: chmod +x ./ci-scripts/upload_sop.sh

      - name: Run Upload Script
        run: ./ci-scripts/upload_sop.sh
        env:
          QUALER_EMAIL: ${{ secrets.QUALER_EMAIL }}
          QUALER_PASSWORD: ${{ secrets.QUALER_PASSWORD }}
          EXCEL_FILE: ${{ needs.re-validate.outputs.EXCEL_FILE }}
          COMMIT_HASH: ${{ env.COMMIT_HASH }}
          AUTHOR_NAME: ${{ github.actor }}

  create-github-release:
    needs: re-validate
    if: needs.re-validate.outputs.UPLOAD == 'true'
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Release Tag (Current Date)
        id: release-tag
        run: echo "RELEASE_TAG=$(date +%Y-%m-%d_%H-%M-%S)" >> $GITHUB_ENV

      - name: Copy Excel File with Date Suffix
        id: copy-excel
        run: |
          ORIGINAL_FILE="${{ needs.re-validate.outputs.EXCEL_FILE }}"
          FILE_DIR=$(dirname "$ORIGINAL_FILE")
          FILE_NAME=$(basename "$ORIGINAL_FILE")
          FILE_BASE="${FILE_NAME%.*}"
          FILE_EXT="${FILE_NAME##*.}"
          TODAY=$(date +%Y-%m-%d)
          RENAMED_FILE="${FILE_DIR}/${FILE_BASE}_${TODAY}.${FILE_EXT}"
          cp "$ORIGINAL_FILE" "$RENAMED_FILE"
          echo "RENAMED_FILE=$RENAMED_FILE" >> $GITHUB_ENV
          echo "✅ Copied file to: $RENAMED_FILE"

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ env.RELEASE_TAG }} \
            --repo "${{ github.repository }}" \
            --title "Release ${{ env.RELEASE_TAG }}" \
            --notes "Automated release for commit ${{ env.COMMIT_HASH }} by ${{ github.actor }}."

      - name: Upload Copied Excel File as Release Asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload ${{ env.RELEASE_TAG }} ${{ env.RENAMED_FILE }} \
            --repo "${{ github.repository }}"

  sync-to-sharepoint:
    needs: re-validate
    if: needs.re-validate.outputs.UPLOAD == 'true'
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl jq
        
      - name: Debug
        run: |
          echo "SHAREPOINT_CLIENT_ID=${SHAREPOINT_CLIENT_ID}"
          echo "SHAREPOINT_CLIENT_SECRET=[HIDDEN]"
          echo "SHAREPOINT_TENANT_ID=${SHAREPOINT_TENANT_ID}"

      - name: Authenticate with SharePoint
        env:
          SHAREPOINT_CLIENT_ID: ${{ secrets.SHAREPOINT_CLIENT_ID }}
          SHAREPOINT_CLIENT_SECRET: ${{ secrets.SHAREPOINT_CLIENT_SECRET }}
          SHAREPOINT_TENANT_ID: ${{ secrets.SHAREPOINT_TENANT_ID }}
        run: |
          TOKEN_RESPONSE=$(curl -X POST \
            -d "grant_type=client_credentials" \
            -d "client_id=${SHAREPOINT_CLIENT_ID}" \
            -d "client_secret=${SHAREPOINT_CLIENT_SECRET}" \
            -d "scope=https://graph.microsoft.com/.default" \
            "https://login.microsoftonline.com/${SHAREPOINT_TENANT_ID}/oauth2/v2.0/token")

          ACCESS_TOKEN=$(echo $TOKEN_RESPONSE | jq -r '.access_token')
          if [ "$ACCESS_TOKEN" == "null" ] || [ -z "$ACCESS_TOKEN" ]; then
            echo "❌ Error: Failed to retrieve access token. Exiting."
            exit 1
          fi
          echo "ACCESS_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV
          echo "ACCESS_TOKEN=${ACCESS_TOKEN}"

      - name: Upload Excel File to SharePoint
        env:
          ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
        run: |
          FILE_PATH="${{ needs.re-validate.outputs.EXCEL_FILE }}"
          FILE_NAME=$(basename "$FILE_PATH")
          TODAY=$(date +%Y-%m-%d_%H-%M-%S)
          UNIQUE_FILE_NAME="${FILE_NAME%.*}_$TODAY.${FILE_NAME##*.}"

          UPLOAD_URL="https://jgiquality.sharepoint.com/_api/web/GetFolderByServerRelativeUrl('/sites/JGI/Templates')/Files/Add(url='$FILE_NAME',overwrite=true)"

          RESPONSE=$(curl -X POST "$UPLOAD_URL" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Accept: application/json;odata=verbose" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$FILE_PATH")

          echo "SharePoint API Response: $RESPONSE"

          if echo "$RESPONSE" | grep -q 'error'; then
            echo "❌ Upload failed. Exiting."
            exit 1
          fi

          FILES_LIST=$(curl -X GET "https://jgiquality.sharepoint.com/_api/web/lists/getbytitle('Templates')/items" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -H "Accept: application/json;odata=verbose")

          echo "Files in Templates: $FILES_LIST"

          if echo "$FILES_LIST" | grep -q "$UNIQUE_FILE_NAME"; then
            echo "✅ Uploaded $UNIQUE_FILE_NAME to SharePoint"
          else
            echo "❌ File not found in SharePoint. Exiting."
            exit 1
          fi
